user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    #tcp_nopush on;

    keepalive_timeout 65;

    include /etc/nginx/conf.d/*.conf;

    upstream sequencer {
        server {{env.Getenv "SEQUENCER"}};
    }

    upstream replicas {
        ip_hash;

        {{range $index, $element := (env.Getenv "REPLICAS" | strings.Split ",") }}
        server {{$element}};
        {{end}}
    }

    server {
        listen 0.0.0.0:8545;

        location / {
           proxy_set_header X-Forwarded-Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header Host $http_host;

           proxy_redirect off;

           if ($request_method = POST) {
             set $upstream '';
             access_by_lua '
               ngx.req.read_body()
               local data = ngx.req.get_body_data()
               local  match = ngx.re.match(ngx.var.request_body, "eth_sendRaw")
               if match then
                 ngx.var.upstream = "sequencer"
               else
                 ngx.var.upstream = "replicas"
               end
             ';
             proxy_pass https://$upstream;
           }
        }
    }
}
